plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.0'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
	id 'com.github.ben-manes.versions' version '0.47.0'
}

group = 'com.long'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0' // 최신 버전으로 업데이트
	implementation 'com.vladsch.flexmark:flexmark-all:0.62.2'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'

	// ✅ JUnit 5 명확하게 지정
	testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher' // ✅ Gradle 9.0 대비


	testImplementation 'org.mockito:mockito-core:5.0.0'
	testImplementation 'org.mockito:mockito-junit-jupiter:5.5.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test' exclude module: 'junit-vintage-engine' // ✅ JUnit 4 제외
}

jacoco {
	toolVersion = "0.8.8" // JaCoCo 최신 버전
}

tasks.withType(Test).configureEach {
	useJUnitPlatform() // ✅ JUnit 5 사용
	finalizedBy jacocoTestReport // ✅ 테스트 후 Jacoco 리포트 실행
}

tasks.jacocoTestReport {
	dependsOn tasks.test // 테스트 실행 후 리포트 생성
	reports {
		xml.required.set(true) // XML 리포트 활성화 (SonarQube 등에서 사용)
		html.required.set(true) // HTML 리포트 활성화 (브라우저에서 확인 가능)
		csv.required.set(false) // CSV 리포트 비활성화
	}
	classDirectories.setFrom(files(classDirectories.files.collect {
		fileTree(dir: it, exclude: [
				'**/MarkdownPreviewController.class',  // 특정 클래스 제외
				'**/GlobalExceptionHandler.class',
				'**/CachingRequestBodyFilter.class',
				'**/JacksonConfig.class',
				'**/CustomException.class',
				'**/RequestLoggingFilter.class',
				'**/LonglegApplication.class'

		])
	}))
}

tasks.jacocoTestCoverageVerification {
	dependsOn tasks.test // 테스트 실행 후 커버리지 검증
	violationRules {
		rule {
			limit {
				minimum = 0.3 // 최소 커버리지 30% 설정
			}
			excludes = ['com.longleg.entity.*',// 엔티티 제외
						'com.longleg.dto.*'] // 엔티티 제외
		}
	}

}

tasks.check {
	dependsOn tasks.jacocoTestCoverageVerification
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

tasks.withType(JavaExec) {
	systemProperty "file.encoding", "UTF-8"
}
